on:
  workflow_call:
    inputs:
      file:
        type: string
        description: "path to the dockerfile"
        default: Dockerfile
      context:
        required: true
        type: string
        description: "build's context is tarball path"
      # context-strip-components:
      #   type: number
      #   description: "strip number leading components from file names on context extraction"
      #   default: 0
      push:
        type: boolean
        description: "push is a shorthand for --output=type=registry"
        required: false
        default: false
      platforms:
        type: string
        description: "list of target platforms for build"
        required: false
      annotations:
        type: string
        description: "list of annotation to set to the image"
        required: false
      labels:
        type: string
        description: "list of metadata for an image"
        required: false
      tags:
        type: string
        description: "list of tags"
        required: false
      build-args:
        type: string
        description: "list of build-time variables"
        required: false
      cosign:
        type: boolean
        description: "sign the resulting docker image(s)"
        required: false
        default: false

jobs:
  main:
    # permissions:
    #   packages: write
    #   id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: download context archive
        uses: actions/download-artifact@v4
        with:
          name: package
      - name: docker login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: setup qemu
        uses: docker/setup-qemu-action@v3
      - name: docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: extract context
        shell: bash
        run: |
          readarray -t array < <(find . -type f -name '*.tgz')
          tar -xf ${{ inputs.context }}
          printf '%s\n' "${array[@]}" | xargs rm -f
      # - name: cache buildx
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.buildx
      #     key: ${{ runner.os }}-buildx-${{ hashFiles(inputs.context) }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-${{ hashFiles(inputs.context) }}
      #       ${{ runner.os }}-buildx-
      - name: build and push
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ${{ inputs.file }}
          push: ${{ inputs.push }}
          platforms: ${{ inputs.platforms }}
          annotations: ${{ inputs.annotations }}
          labels: ${{ inputs.labels }}
          tags: ${{ inputs.tags }}
          build-args: ${{ inputs.build-args }}
          sbom: false
          provenance: false
      - name: install cosign
        if: inputs.cosign == true
        uses: sigstore/cosign-installer@v3.5.0
        # with:
        #   cosign-release: 'v2.1.1'
      - name: sign the docker image
        if: inputs.cosign == true
        run: |
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ inputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
